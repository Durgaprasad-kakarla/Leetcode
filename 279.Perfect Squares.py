class Solution:
    def numSquares(self, n: int) -> int:
        #Using dynamic programming bottom up approach
        dp=[i for i in range(n+1)]
        for i in range(n+1):
            j=1
            while j*j<=i:
                dp[i]=min(dp[i],dp[i-j*j]+1)
                j+=1
        return dp[-1]
        ''' if n==12
        dp=[0,1,2,3,4,5,6,7,8,9,10,11,12]
        For each iteration of i:
        dp:
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 1, 5, 6, 7, 8, 9, 10, 11, 12]  
        [0, 1, 2, 3, 1, 2, 6, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 1, 2, 3, 7, 8, 9, 10, 11, 12]
        [0, 1, 2, 3, 1, 2, 3, 4, 8, 9, 10, 11, 12]
        [0 , 1, 2, 3, 1, 2, 3, 4, 2, 9, 10, 11, 12]
        [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 10, 11, 12]
        [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 11, 12]
        [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 12]
        [0, 1, 2, 3, 1, 2, 3, 4, 2, 1, 2, 3, 3]
        Finally dp[-1]==3  '''      
        
